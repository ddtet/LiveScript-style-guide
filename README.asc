= LiveScript 語法指南
Jeff Lin<jeff.lin@onelab.tw>
v1.0, May 2015

----
翻譯自： https://github.com/gkz/LiveScript-style-guide
----

本語法指南是針對 LiveScript(http://livescript.net) 所撰寫。

== 程式碼佈局

=== 縮排

每一階層不多不少地使用 **4 個空白** 代表縮排，不使用 tab。 

=== 空白行

最上層類別定義與函數宣告之前至少需要一列空白，並且可以視閱讀上的需要再增加。

=== 尾隨空白

不要留下任何尾隨空白。包含程式碼、註解文字之後，以及空白行中都不要留下空白。

[TIP]
.譯者注
====
因為版本管理系統不懂得忽略這種空白，使得這些空白會讓版本差異的比對結果難以閱讀。
====

=== 行尾

不要在行尾加上分號 (;) ，只要使用換行字元即可。分號只用來分隔合併於同一行的多個陳述式。

=== 每行陳述式

一行只包含一個陳述式。

    x = 0
    x + y

=== 對齊

利用如下列的精簡語法格式化 `switch` 條件式：

    switch
    | n <= 0     => []
    | empty list => []
    | otherwise  => [x] ++ take n - 1, xs

== 命名

使用連字號 (-) 而不採用駝𡶶式或下底線 (_) 來進行命名、取用變數。

    to-upper-case = -> it.to-upper-case!

其中的例外是類別，使用帕斯卡命名法(大駝峰式)。

    class WidgetThing extends Base
      ...

== 語義

=== 布林值

`true` 和 `false` 與它的別名 (`yes`, `no`, `on`, `off`) 相比更能表現語意，除非別名更有助於程式閱讀，否則優先使用它們。

=== 數值

如果可以的話，只要能夠讓程式更容易閱讀，就在數值加上單位的描述。

    period = 7days * 52weeks

=== 字串

使用單引號 (') 像 `'hello world'` 這樣來包覆字串，除非字串本身有許多單引號，或是裡面帶有要組合進去的變數，像是 `"hello #var"` 這樣。

=== 清單

==== 文字清單

在開頭與結尾處都加上一個空白，像下面的例子⋯

    <[ list of words ]>

而不要像這樣⋯

    <[list of words]>

==== 空白

在逗號後頭加上一個空白，前面不要。如下面的例子⋯

    [x, y, z]

=== This

使用 `@` 來代表 `this`，除非它是在單獨，後面沒接其它東西的狀態。

=== Prototype

使用 `::` 取代 `.prototype.`

    Array::slice

== Operators

=== Spacing

Singly space operators, except in the case of their use in array access.

    x = 1 + 2
    list[i-1]

=== Aliases

===# English vs Symbols
Use `and`, `or`, etc. over `&&`, `||` except when you need the special functionality of `&&`, `||` etc. (they do not close implicit calls, unlike `and`, `or`, etc.)

    x = false
    y = true
    (not) x or y #=> true  [(not)(x) || y]
    (not) x || y #=> false [(not)(x || y)]

===# is not / isnt
Use `isnt` over `is not`.

== Commas

When you can, avoid commas. This means you can leave them out when the preceding item is a non-callable in a list (this includes arguments). However, keep it consistent within a call or a list. Either use commas between all items, or don't use them at all.

    [1 2 3]
    add-numbers 5 x
    [1, x, 3]

== Parentheses

Avoid the use of parentheses whenever possible.

Do not use them when calling functions:

    Math.pow 2 3

You can use `do` instead of parentheses if you are calling against a block for instance:

    some-func do
      prop:  3
      other: 5

Avoid them with chaining, access and logic closes implicit calls:

    $ '#content .slider' .find 'a' .slide-up!

You can avoid using them in lists by using a semicolon as a separator when a comma won't work.

    [add 2 3; times 2 3]

== Calling Functions

As mentioned earlier, if you can avoid using commas in the argument list, do so.

If you are calling with no arguments, use a bang call:

    func!

Unless you are negating or boolean casting the result, then use `()` as otherwise it looks funny.

    !func()
    !!func()

== List Access

Use `list.0` instead of `list[0]`. Only use the brackets if you need to do some math, e.g. `list[i+0].8`

== Switch

As mentioned earlier, align your switch statements.

=== Short vs Long Form

If you can fit the body of each case on a single line, except for the `otherwise` case, use the short form. Otherwise, use the long form.

    switch
    | even x    => x
    | even y    => y
    | otherwise =>
      x + y

    switch
    case f x
        blah
        ...
    case g x
        asdf
        ...
    default
        ...

=== Default

Use `default` with the long form.

Use `| otherwise =>` with the short form, unless your test cases are very short, in which case you can use `| _ =>`

    switch x
    | 2 => 7
    | 3 => 8
    | 4 => 9
    | _ => 10
